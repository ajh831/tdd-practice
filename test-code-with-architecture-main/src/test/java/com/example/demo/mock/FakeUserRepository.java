package com.example.demo.mock;

import com.example.demo.user.domain.User;
import com.example.demo.user.domain.UserStatus;
import com.example.demo.user.service.port.UserRepository;

import java.util.*;
import java.util.concurrent.atomic.AtomicLong;

public class FakeUserRepository implements UserRepository {

    // DB처럼 자동으로 증가하는 ID값이 필요
    private final AtomicLong autoGeneratedId = new AtomicLong(0); // count 관리
    private final List<User> data = Collections.synchronizedList(new ArrayList<>()); // save했을 대 데이터를 저장할 리스트. 병렬처리를 대비하여 synchronizedList 선언
/*
    // 소형테스트는 동기화를 걱정할 필요가 없으므로 Long, ArrayList를 이용 해도 됨
    private final Long autoGeneratedId = 0L;
    private final List<User> data = new ArrayList<>();
*/

    @Override
    public Optional<User> findById(long id) {
        return data.stream().filter(item -> item.getId() == id).findAny();
    }

    @Override
    public Optional<User> findByIdAndStatus(long id, UserStatus userStatus) {
        return data.stream().filter(item -> item.getId().equals(id) && item.getStatus().equals(userStatus)).findAny();
    }

    @Override
    public Optional<User> findByEmailAndStatus(String email, UserStatus userStatus) {
        return data.stream().filter(item -> item.getEmail().equals(email) && item.getStatus().equals(userStatus)).findAny();
    }

    @Override
    public User save(User user) {
        if (user.getId() == null || user.getId() == 0){
            User newUser = User.builder()
                    .id(autoGeneratedId.incrementAndGet())
                    .email(user.getEmail())
                    .nickname(user.getNickname())
                    .address(user.getAddress())
                    .certificationCode(user.getCertificationCode())
                    .status(user.getStatus())
                    .lastLoginAt(user.getLastLoginAt())
                    .build();
            data.add(newUser);
            return newUser;
        }
        else {
            data.removeIf(item -> Objects.equals(item.getId(), user.getId()));
            data.add(user);
            return user;
        }

    }

}
